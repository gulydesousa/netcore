using Serilog;
using CRUDexample.StartupExtensions;
using CRUDexample.Middleware;
using Microsoft.AspNetCore.Builder;

var builder = WebApplication.CreateBuilder(args);


//ILogging
//builder.Host.ConfigureLogging(logging =>
//{
//    logging.ClearProviders();
//    logging.AddConsole();
//    logging.AddDebug();
//    logging.AddEventLog();
//});

// Configuración de Serilog
Log.Logger = new LoggerConfiguration()
    .ReadFrom.Configuration(builder.Configuration)
    .Enrich.FromLogContext()
    .WriteTo.Console()
    .CreateLogger();

builder.Host.UseSerilog((context, services, loggerConfiguration) =>
{
    loggerConfiguration.ReadFrom.Configuration(context.Configuration)
                       .Enrich.FromLogContext()
                       .WriteTo.Console();
});


//***********************************
//***********************************
//Adds controllers and views as services
//builder.Services.AddControllersWithViews();

builder.Services.ConfigureServices(builder.Configuration);
//***********************************
//***********************************

var app = builder.Build();

//Add the request logging middleware to the application pipeline
app.UseSerilogRequestLogging();


//Files in wwroot folder are served as static files
app.UseStaticFiles();

// The environment name is usually set by the ASPNETCORE_ENVIRONMENT environment variable, which is typically set in the launchSettings.json
if (builder.Environment.IsDevelopment())
{
    //adds the developer exception page middleware to the middleware pipeline when called within the if statement.
    //The middleware catches any unhandled exceptions that occur during request processing,
    //then generates an error page that provides debugging information to the developers.
    app.UseDeveloperExceptionPage();
}
else
{
    app.UseExceptionHandler("/Error");
    //Usamos nuestro exception handling middleware
    app.UseExceptionHandlingMiddleware();
}

app.UseHsts();
app.UseHttpsRedirection();

app.UseHttpLogging();

//app.Logger.LogTrace("log-Trace");
//app.Logger.LogDebug("debug-message");
//app.Logger.LogInformation("info-message");
//app.Logger.LogWarning("warning-message");
//app.Logger.LogError("error-message");
//app.Logger.LogCritical("critical-message");


if (builder.Environment.IsEnvironment("Testing") == false)
{
    //Rotativa
    Rotativa.AspNetCore.RotativaConfiguration.Setup("wwwroot", wkhtmltopdfRelativePath: "Rotativa");
}

//Habilita el enrutamiento en la aplicaci�n, lo cual permite que las URLs de la aplicaci�n sean generadas de manera sencilla y
//que las solicitudes puedan ser enviadas a los controladores correspondientes basados en la URL.
app.UseRouting(); //Identify action method based on the incoming request (route)

//Habilita la autenticaci�n en la aplicaci�n, lo cual permite que los usuarios sean autenticados y que sus identidades sean establecidas.
app.UseAuthentication(); //Reading idenity cookie

//Habilita la autorizaci�n en la aplicaci�n, lo cual permite que las pol�ticas de autorizaci�n sean aplicadas a los usuarios.
app.UseAuthorization(); //Authorize the user

//"mapea" cualquier solicitud HTTP entrante a un controlador apropiado.
//En otras palabras, configura un enrutamiento predeterminado para cualquier solicitud que llegue al servidor.
app.MapControllers(); //Execute the filter pipeline and the action method

#region Conventional routing

app.UseEndpoints(endpoints =>
{
    endpoints.MapControllerRoute(
               name: "areas",
               pattern: "{area:exists}/{controller=Home}/{action=Index}");
    //Admin/Home/Index
    //Admin

    endpoints.MapControllerRoute(
           name: "default",
           pattern: "{controller}/{action}/{id?}");
});


#endregion Conventional routing

app.Run();

//make the autogenerated Program  accessible programatically
public partial class Program { }
